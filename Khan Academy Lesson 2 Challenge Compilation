/* Lesson Exercise Log */

-- create and fill table

CREATE TABLE exercise_logs
    (id INTEGER PRIMARY KEY AUTOINCREMENT,
    type TEXT,
    minutes INTEGER, 
    calories INTEGER,
    heart_rate INTEGER);


INSERT INTO exercise_logs(type, minutes, calories, heart_rate) VALUES ("biking", 30, 100, 110);
INSERT INTO exercise_logs(type, minutes, calories, heart_rate) VALUES ("biking", 10, 30, 105);
INSERT INTO exercise_logs(type, minutes, calories, heart_rate) VALUES ("dancing", 15, 200, 120);
INSERT INTO exercise_logs(type, minutes, calories, heart_rate) VALUES ("tree climbing", 30, 70, 90);
INSERT INTO exercise_logs(type, minutes, calories, heart_rate) VALUES ("tree climbing", 25, 72, 80);
INSERT INTO exercise_logs(type, minutes, calories, heart_rate) VALUES ("rowing", 30, 70, 90);
INSERT INTO exercise_logs(type, minutes, calories, heart_rate) VALUES ("hiking", 60, 80, 85);

-- display table
SELECT * FROM exercise_logs;

-- selecting only exercises over 50 calories and sorted ascending
SELECT * FROM exercise_logs WHERE calories > 50 ORDER BY calories;

-- using AND command to add condition of less than 30 minutes exercised
SELECT * FROM exercise_logs WHERE calories > 50 AND minutes < 30;

-- using OR command to choose all option with more than 50 calories burned or high heart rate
SELECT * FROM exercise_logs WHERE calories > 50 OR heart_rate > 100;

-- selecting only biking exercises
SELECT * FROM exercise_logs WHERE type = "biking";

-- selecting outdoor activities 2 ways
/* AND */
SELECT * FROM exercise_logs WHERE type = "biking" OR type = "hiking" OR type = "tree climbing" OR type = "rowing";

/* IN */
SELECT * FROM exercise_logs WHERE type IN ("biking", "hiking", "tree climbing", "rowing");

-- creating a second table with Dr. recommendations
CREATE TABLE drs_favorites
    (id INTEGER PRIMARY KEY,
    type TEXT,
    reason TEXT);

INSERT INTO drs_favorites(type, reason) VALUES ("biking", "Improves endurance and flexibility.");
INSERT INTO drs_favorites(type, reason) VALUES ("hiking", "Increases cardiovascular health.");

-- display Dr. recommendations
SELECT type FROM drs_favorites;

-- display exercises from log filtered by Dr. recommentations, automatically updated when Dr.'s table changes using sub queries
SELECT * FROM exercise_logs WHERE type IN (
SELECT type FROM drs_favorites);

-- using more complex query to display exercises that improve cardiovascular health with = and LIKE operators
SELECT * FROM exercise_logs WHERE type IN (
    SELECT type FROM drs_favorites WHERE reason = "Increases cardiovascular health.");

/* LIKE */

SELECT * FROM exercise_logs WHERE type IN (
    SELECT type FROM drs_favorites WHERE reason LIKE "%cardiovascular%");
    
-- display total calories burned per exercise type
SELECT type, SUM(calories) AS total_calories FROM exercise_logs 
    GROUP BY type
    ;

-- filter by groups that have burned more than 150 calories total
SELECT type, SUM(calories) AS total_calories FROM exercise_logs
    GROUP BY type
    HAVING total_calories > 150
    ;

-- filter by groups that have burned more than 75 calories on average
SELECT type, AVG(calories) AS avg_calories FROM exercise_logs
    GROUP BY type
    HAVING avg_calories > 75
    ; 
    
-- display exercises that have been performed 2 times or more
SELECT type FROM exercise_logs GROUP BY type HAVING COUNT(*) >= 2;

-- count how often heartrate went beyond max heartrate (220 - age)
SELECT COUNT(*) FROM exercise_logs 
    WHERE heart_rate > 220 - 34;

-- count how often heartrate was in target zone (50-90% of max)
SELECT COUNT(*) FROM exercise_logs 
    WHERE heart_rate > ROUND (.5*(220 - 34) 
    AND heart_rate <= ROUND (.9*(220 - 34)
    ;

-- create log fro various target zones using CASE
SELECT type, heart_rate,
    CASE 
        WHEN heart_rate > 220-30 THEN "above max"
        WHEN heart_rate > ROUND(0.90 * (220-34)) THEN "above target"
        WHEN heart_rate > ROUND(0.50 * (220-34)) THEN "within target"
        ELSE "below target"
    END as "hr_zone"
FROM exercise_logs;

--diplay count of exercises in hr_zones
SELECT COUNT(*) AS "Count",
      CASE 
        WHEN heart_rate > 220-30 THEN "above max"
        WHEN heart_rate > ROUND(0.90 * (220-30)) THEN "above target"
        WHEN heart_rate > ROUND(0.50 * (220-30)) THEN "within target"
        ELSE "below target"
      END as "hr_zone"
   FROM exercise_logs
   GROUP BY hr_zone
   ;



/* Challenge Karaoke Song selection */

-- create and fill table

CREATE TABLE songs (
    id INTEGER PRIMARY KEY,
    title TEXT,
    artist TEXT,
    mood TEXT,
    duration INTEGER,
    released INTEGER);
    
INSERT INTO songs (title, artist, mood, duration, released)
    VALUES ("Bohemian Rhapsody", "Queen", "epic", 60, 1975);
INSERT INTO songs (title, artist, mood, duration, released)
    VALUES ("Let it go", "Idina Menzel", "epic", 227, 2013);
INSERT INTO songs (title, artist, mood, duration, released)
    VALUES ("I will survive", "Gloria Gaynor", "epic", 198, 1978);
INSERT INTO songs (title, artist, mood, duration, released)
    VALUES ("Twist and Shout", "The Beatles", "happy", 152, 1963);
INSERT INTO songs (title, artist, mood, duration, released)
    VALUES ("La Bamba", "Ritchie Valens", "happy", 166, 1958);
INSERT INTO songs (title, artist, mood, duration, released)
    VALUES ("I will always love you", "Whitney Houston", "epic", 273, 1992);
INSERT INTO songs (title, artist, mood, duration, released)
    VALUES ("Sweet Caroline", "Neil Diamond", "happy", 201, 1969);
INSERT INTO songs (title, artist, mood, duration, released)
    VALUES ("Call me maybe", "Carly Rae Jepsen", "happy", 193, 2011)
    
-- Display table

SELECT * FROM songs;

-- display list of songs

SELECT title FROM songs;

-- display songs after 1990 or epic mood

SELECT title FROM songs WHERE released > 1990 OR mood = "epic";

-- display songs that are epic, after 1990 and under 4 minutes

SELECT title FROM songs WHERE released > 1990 AND mood = "epic" AND duration < 240;

/* Challenge PLaylist Creation */

-- create and fill 2 tables for artists and songs

CREATE TABLE artists (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    country TEXT,
    genre TEXT);

INSERT INTO artists (name, country, genre)
    VALUES ("Taylor Swift", "US", "Pop");
INSERT INTO artists (name, country, genre)
    VALUES ("Led Zeppelin", "US", "Hard rock");
INSERT INTO artists (name, country, genre)
    VALUES ("ABBA", "Sweden", "Disco");
INSERT INTO artists (name, country, genre)
    VALUES ("Queen", "UK", "Rock");
INSERT INTO artists (name, country, genre)
    VALUES ("Celine Dion", "Canada", "Pop");
INSERT INTO artists (name, country, genre)
    VALUES ("Meatloaf", "US", "Hard rock");
INSERT INTO artists (name, country, genre)
    VALUES ("Garth Brooks", "US", "Country");
INSERT INTO artists (name, country, genre)
    VALUES ("Shania Twain", "Canada", "Country");
INSERT INTO artists (name, country, genre)
    VALUES ("Rihanna", "US", "Pop");
INSERT INTO artists (name, country, genre)
    VALUES ("Guns N' Roses", "US", "Hard rock");
INSERT INTO artists (name, country, genre)
    VALUES ("Gloria Estefan", "US", "Pop");
INSERT INTO artists (name, country, genre)
    VALUES ("Bob Marley", "Jamaica", "Reggae");

CREATE TABLE songs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    artist TEXT,
    title TEXT);

INSERT INTO songs (artist, title)
    VALUES ("Taylor Swift", "Shake it off");
INSERT INTO songs (artist, title)
    VALUES ("Rihanna", "Stay");
INSERT INTO songs (artist, title)
    VALUES ("Celine Dion", "My heart will go on");
INSERT INTO songs (artist, title)
    VALUES ("Celine Dion", "A new day has come");
INSERT INTO songs (artist, title)
    VALUES ("Shania Twain", "Party for two");
INSERT INTO songs (artist, title)
    VALUES ("Gloria Estefan", "Conga");
INSERT INTO songs (artist, title)
    VALUES ("Led Zeppelin", "Stairway to heaven");
INSERT INTO songs (artist, title)
    VALUES ("ABBA", "Mamma mia");
INSERT INTO songs (artist, title)
    VALUES ("Queen", "Bicycle Race");
INSERT INTO songs (artist, title)
    VALUES ("Queen", "Bohemian Rhapsody");
INSERT INTO songs (artist, title)
    VALUES ("Guns N' Roses", "Don't cry");
    
-- display titles by artist Queen
SELECT title FROM songs WHERE artist = "Queen";

-- display artists from Pop Genre
SELECT name FROM artists WHERE Genre = "Pop";

--select the title of all the songs from the 'Pop' artists using IN command and subqueries
SELECT title FROM songs WHERE artist IN (
  SELECT name FROM artists WHERE Genre = "Pop");
  
/* Challenge the wordiest Author */

-- create and fille table

CREATE TABLE books (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    author TEXT,
    title TEXT,
    words INTEGER);
    
INSERT INTO books (author, title, words)
    VALUES ("J.K. Rowling", "Harry Potter and the Philosopher's Stone", 79944);
INSERT INTO books (author, title, words)
    VALUES ("J.K. Rowling", "Harry Potter and the Chamber of Secrets", 85141);
INSERT INTO books (author, title, words)
    VALUES ("J.K. Rowling", "Harry Potter and the Prisoner of Azkaban", 107253);
INSERT INTO books (author, title, words)
    VALUES ("J.K. Rowling", "Harry Potter and the Goblet of Fire", 190637);
INSERT INTO books (author, title, words)
    VALUES ("J.K. Rowling", "Harry Potter and the Order of the Phoenix", 257045);
INSERT INTO books (author, title, words)
    VALUES ("J.K. Rowling", "Harry Potter and the Half-Blood Prince", 168923);
INSERT INTO books (author, title, words)
    VALUES ("J.K. Rowling", "Harry Potter and the Deathly Hallows", 197651);
INSERT INTO books (author, title, words)
    VALUES ("Stephenie Meyer", "Twilight", 118501);
INSERT INTO books (author, title, words)
    VALUES ("Stephenie Meyer", "New Moon", 132807);
INSERT INTO books (author, title, words)
    VALUES ("Stephenie Meyer", "Eclipse", 147930);
INSERT INTO books (author, title, words)
    VALUES ("Stephenie Meyer", "Breaking Dawn", 192196);
INSERT INTO books (author, title, words)
    VALUES ("J.R.R. Tolkien", "The Hobbit", 95022);
INSERT INTO books (author, title, words)
    VALUES ("J.R.R. Tolkien", "Fellowship of the Ring", 177227);
INSERT INTO books (author, title, words)
    VALUES ("J.R.R. Tolkien", "Two Towers", 143436);
INSERT INTO books (author, title, words)
    VALUES ("J.R.R. Tolkien", "Return of the King", 134462);
    
-- select all the authors who have written more than 1 million words, using GROUP BY and HAVING

SELECT author, SUM(words) AS total_words FROM books
    GROUP BY author
    HAVING total_words > 1000000
    ;
    
-- select all the authors that write more than an average of 150,000 words per book

SELECT author, AVG(words) AS avg_words FROM books
    GROUP BY author
    HAVING avg_words > 150000
    ;

/* Challenge Gradebook */

--create and fill table

CREATE TABLE student_grades (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    number_grade INTEGER,
    fraction_completed REAL);
    
INSERT INTO student_grades (name, number_grade, fraction_completed)
    VALUES ("Winston", 90, 0.805);
INSERT INTO student_grades (name, number_grade, fraction_completed)
    VALUES ("Winnefer", 95, 0.901);
INSERT INTO student_grades (name, number_grade, fraction_completed)
    VALUES ("Winsteen", 85, 0.906);
INSERT INTO student_grades (name, number_grade, fraction_completed)
    VALUES ("Wincifer", 66, 0.7054);
INSERT INTO student_grades (name, number_grade, fraction_completed)
    VALUES ("Winster", 76, 0.5013);
INSERT INTO student_grades (name, number_grade, fraction_completed)
    VALUES ("Winstonia", 82, 0.9045);

--  select all of the rows, and display the name, number_grade, and percent_completed
SELECT name, number_grade, ROUND( 100 * fraction_completed) AS percent_completed FROM student_grades;

-- display how many students have earned which letter_grade

SELECT COUNT(*) AS "student count",
      CASE
          WHEN number_grade >= 90 THEN "A"
          WHEN number_grade >= 80 THEN "B"
          WHEN number_grade >= 70 THEN "C"
          ELSE "F"
      END AS letter_grade
    FROM student_grades
    GROUP BY letter_grade
    ;
